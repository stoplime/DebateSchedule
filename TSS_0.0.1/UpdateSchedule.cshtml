@using BussinessObject;
@using DataAccess;

<html>

<head>
    <!-- Load Base -->
    @RenderPage("Base.cshtml")
</head>

<body>
    <!-- Content -->
    <div class="container">
        <h4>Update Schedule</h4>
        @{
            GetUserType type = new GetUserType();
            if (Session["UserType"] != null)
            {
                if (!type.isUserSuper((string)Session["UserType"]))
                {
                    Response.Redirect("~/index.cshtml");
                }
            }
            else
            {
                Response.Redirect("~/index.cshtml");
            }

            Validation.RequireField("MatchTime", "A match time is required.");
            Validation.RequireField("Team1", "Team1 is required.");
            Validation.RequireField("Team2", "Team2 is required.");

            DateTime MatchTime = DateTime.MinValue;
            string Team1 = "";
            string Team2 = "";
            int Team1ID = 0;
            int Team2ID = 0;

            string MatchId = UrlData[0];
            if (MatchId.IsEmpty())
            {
                Response.Redirect("~/schedule.cshtml");
            }

            ScheduleData accessData = new ScheduleData();

            List<int> teamsAtMatchTime = new List<int>();

            if (IsPost && Validation.IsValid())
            {

                if (Request.Form["update"] == "update")
                {
                    MatchTime = Request["MatchTime"].AsDateTime();
                    //System.Diagnostics.Debug.WriteLine("Morning value: "+Request.Form["Morning"]);
                    //System.Diagnostics.Debug.WriteLine("MatchTime before time value: " + MatchTime.ToString());
                    if (Request.Form["TimeOfDay"] == "Morning")
                    {
                        MatchTime = MatchTime.AddHours(9);
                    }
                    else
                    {
                        MatchTime = MatchTime.AddHours(14);
                    }
                    //System.Diagnostics.Debug.WriteLine("MatchTime after time value: " + MatchTime.ToString());
                    Team1ID = int.Parse(Request["Team1"]);
                    Team2ID = int.Parse(Request["Team2"]);
                    accessData.getTeamsFromDate(MatchTime, out teamsAtMatchTime, int.Parse(MatchId));
                    for (int i = 0; i < teamsAtMatchTime.Count; i++)
                    {
                        if (Team1ID == teamsAtMatchTime[i])
                        {
                            Session["scheduleErrorMsgs"] = "Error: The selected team1 already has a match at this time";
                            Response.Redirect(Href("~/UpdateSchedule", MatchId));
                        }
                        if (Team2ID == teamsAtMatchTime[i])
                        {
                            Session["scheduleErrorMsgs"] = "Error: The selected team2 already has a match at this time";
                            Response.Redirect(Href("~/UpdateSchedule", MatchId));
                        }
                        if (Team1ID == Team2ID)
                        {
                            Session["scheduleErrorMsgs"] = "Error: The selected team1 and team2 are the same";
                            Response.Redirect(Href("~/UpdateSchedule", MatchId));
                        }
                    }
                    //System.Diagnostics.Debug.WriteLine("MatchTime before post value: " + MatchTime.ToString());
                    accessData.UpdateMatch(int.Parse(MatchId), MatchTime, Team1ID, Team2ID);

                    Response.Redirect("~/schedule.cshtml");
                }
                if (Request.Form["delete"] == "delete")
                {
                    accessData.DeleteMatch(int.Parse(MatchId));
                    Response.Redirect("~/schedule.cshtml");
                }
            }
            else
            {
                accessData.GetScheduleData(int.Parse(MatchId), out MatchTime, out Team1ID, out Team2ID);
                Team1 = accessData.GetTeamName(Team1ID);
                Team2 = accessData.GetTeamName(Team2ID);
            }
            accessData.getTeamsFromDate(MatchTime, out teamsAtMatchTime, 0);

            if (Session["scheduleErrorMsgs"] != null)
            {
                <p class="red lighten-2">
                    @Session["scheduleErrorMsgs"]
                </p>
                Session["scheduleErrorMsgs"] = null;
            }
        }
        <form class="col s12" method="post" action="">
            <fieldset>
                <div class="row">
                    <div class="input-field col s12 m6 l4">
                        <input name="MatchTime" type="date" class="datepicker validate" data-value="@MatchTime.ToShortDateString()" >
                        <label for="MatchTime">Match Time</label>
                        <p class="red-text lighten-2">@Html.ValidationMessage("MatchTime")</p>
                    </div>
                    <div class="input-field col s12 m6 l4">
                        @{

                            if (MatchTime.ToShortTimeString() == "9:00 AM")
                            {
                                <p>
                                    <input name="TimeOfDay" type="radio" id="Morning" value="Morning" checked />
                                    <label for="Morning">Morning 9am</label>
                                </p>
                                <p>
                                    <input name="TimeOfDay" type="radio" id="AfterNoon" value="AfterNoon" />
                                    <label for="AfterNoon">AfterNoon 2pm</label>
                                </p>
                            }
                            else
                            {
                                <p>
                                    <input name="TimeOfDay" type="radio" id="Morning" value="Morning" />
                                    <label for="Morning">Morning 9am</label>
                                </p>
                                <p>
                                    <input name="TimeOfDay" type="radio" id="AfterNoon" value="AfterNoon" checked />
                                    <label for="AfterNoon">AfterNoon 2pm</label>
                                </p>
                            }
                        }
                    </div>
                    <div class="input-field col s12 m6 l4">
                        <select id="team1Select" name="Team1" onchange="checkValidity()">
                            <option value="0" disabled>Select a Team</option>
                            @{
                                List<string> team1s;
                                List<int> team1IDs;
                                accessData.GetTeams(out team1IDs, out team1s);
                                for (int i = 0; i < team1s.Count; i++)
                                {
                                    if (team1s[i] == Team1)
                                    {
                                        <option value="@team1IDs[i]" selected>@team1s[i]</option>
                                    }
                                    else
                                    {
                                        <option value="@team1IDs[i]" >@team1s[i]</option>
                                    }
                                }
                            }
                        </select>
                        <p class="red-text lighten-2">@Html.ValidationMessage("Team1")</p>
                    </div>
                    <div class="input-field col s12 m12 l4">
                        <select id="team2Select" name="Team2">
                            <option value="0" disabled>Select a Team</option>
                            @{
                                List<string> team2s;
                                List<int> team2IDs;
                                accessData.GetTeams(out team2IDs, out team2s);
                                for (int i = 0; i < team2s.Count; i++)
                                {
                                    if (team2s[i] == Team2)
                                    {
                                        <option value="@team2IDs[i]" selected>@team2s[i]</option>
                                    }
                                    else
                                    {
                                        <option value="@team2IDs[i]">@team2s[i]</option>
                                    }
                                }
                            }
                        </select>
                        <p class="red-text lighten-2">@Html.ValidationMessage("Team2")</p>
                    </div>
                </div>
                <div class="row ">
                    <div class="col s6 m4 l4">
                        <a href="~/schedule.cshtml" class="btn waves-effect waves-light">Cancel</a>
                    </div>
                    <div class="col s6 m4 l4">
                        <button class="btn waves-effect waves-light" type="submit" name="update" value="update">Update</button>
                    </div>
                    <div class="col s6 m4 l4">
                        <button class="btn waves-effect waves-light" type="submit" name="delete" value="delete">Delete</button>
                    </div>
                </div>
            </fieldset>
        </form>
        @{
            
            
        }
        <script type="text/javascript">
            $(document).ready(function () {
                $('select').material_select();
            });
            $('.datepicker').pickadate({
                format: 'm/d/yyyy',
                formatSubmit: 'm/d/yyyy',
                selectMonths: true,
                selectYears: true,
                min: new Date(2005, 0, 1),
                max: false
            });

        </script>
        
               
    </div>
    @RenderPage("footer.cshtml")
</body>

</html>