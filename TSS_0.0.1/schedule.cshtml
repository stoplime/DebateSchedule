@using BussinessObject;
@using DataAccess;

<html>

<head>
    <!-- Load Base -->
    @RenderPage("Base.cshtml")
</head>

<body>
    <!-- Content -->
    @{
        Validation.RequireField("addMatchTime", "A match time is required.");
        Validation.RequireField("Team1", "Team1 is required.");
        Validation.RequireField("Team2", "Team2 is required.");

        Scheduler scheduler = new Scheduler();
        ScheduleData schedulerData = new ScheduleData();
        GetUserType getType = new GetUserType();
        DateTime start = DateTime.Now;
        string userType = (string)Session["UserType"];

        DateTime addDateTime = DateTime.MinValue;
        int addTeam1 = 0;
        int addTeam2 = 0;

        if (Session["addDateTime"] != null)
        {
            addDateTime = (DateTime)Session["addDateTime"];
        }
        if (Session["addTeam1"] != null)
        {
            addTeam1 = (int)Session["addTeam1"];
        }
        if (Session["addTeam2"] != null)
        {
            addTeam2 = (int)Session["addTeam2"];
        }

        if (IsPost)
        {
            if (Request.Form["edit"] == "edit")
            {
                Session["EditSchedule"] = true;
            }
            if (Request.Form["cancel"] == "cancel")
            {
                Session["EditSchedule"] = false;
            }
            if (Request.Form["reschedule"] == "reschedule")
            {
                if (DateTime.TryParse(Request.Form["startDate"], out start))
                {
                    scheduler.autoReschedule(start);
                    Session["EditSchedule"] = false;
                }
                else
                {
                    <p class="red lighten-2">
                        Error: Starting date cannot be understood
                    </p>
                }
            }
            if (Request.Form["addRow"] == "addRow")
            {
                schedulerData.addNewRow(DateTime.Now, 0, 0);
                Response.Redirect("~/UpdateSchedule.cshtml");
            }
            System.Diagnostics.Debug.WriteLine("~~~~~prevalid~~~~ ");
            System.Diagnostics.Debug.WriteLine("valid~~~~ ");
            if (Request.Form["addMatchTime"] != null)
            {
                addDateTime = Request.Form["addMatchTime"].AsDateTime();
                Session["addMatchTime"] = addDateTime;
                System.Diagnostics.Debug.WriteLine("addDateTime: " + addDateTime);
            }
            if (Request.Form["Team1"] != null)
            {
                addTeam1 = int.Parse(Request.Form["Team1"]);
                Session["Team1"] = addTeam1;
                System.Diagnostics.Debug.WriteLine("addTeam1: " + addTeam1);
            }
            if (Request.Form["Team2"] != null)
            {
                addTeam2 = int.Parse(Request.Form["Team2"]);
                Session["addTeam2"] = addTeam2;
                System.Diagnostics.Debug.WriteLine("addTeam2: " + addTeam2);
            }
            if (Request.Form["submitAdd"] != null)
            {
                if (addDateTime != DateTime.MinValue && addTeam1 != 0 && addTeam2 != 0)
                {
                    schedulerData.addNewRow(addDateTime, addTeam1, addTeam2);
                }
                else
                {
                    <p>error: required field not passed</p>
                }
            }


            Response.Redirect("~/schedule.cshtml", false);
        }

        if (userType != "")
        {
            if (getType.isUserSuper(userType))
            {
                if (Session["EditSchedule"] != null)
                {
                    if ((bool)Session["EditSchedule"] == false)
                    {
                        <div class="container">
                            <form method="post">
                                <button class="btn waves-effect waves-light" type="submit" name="edit" value="edit">
                                    Edit <i class="material-icons prefix">mode_edit</i>
                                </button>
                            </form>
                        </div>
                    }
                    else
                    {
                        <div class="container">
                            <form method="post">
                                <div class="row">
                                    <div class="col s6 m4 l3">
                                        <button class="btn waves-effect waves-light" type="submit" name="cancel" value="cancel">
                                            Cancel
                                        </button>
                                    </div>
                                    <div class="col s6 m4 l3">
                                        <input name="startDate" type="date" class="datepicker">
                                        <label for="startDate">Start Schedule Date</label>
                                    </div>
                                    <div class="col s6 m4 l3">
                                        <button class="btn waves-effect waves-light" type="submit" name="reschedule" value="reschedule">
                                            Reschedule
                                        </button>
                                    </div>
                                    <div class="col s6 m4 l3">
                                        <button class="btn waves-effect waves-light" type="submit" name="addRow" value="addRow">
                                            Add Row
                                        </button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    }
                }

            }
        }
    }
    <div class="container">
        <h4>Match Schedule</h4>
        <table id="schedule" class="bordered">
            <thead>
                <tr>
                    @{
                        if (Session["EditSchedule"] != null)
                        {
                            if ((bool)Session["EditSchedule"])
                            {
                                <th data-field="edit">&nbsp;</th>
                            }
                        }
                    }
                    <th data-field="id">Match ID</th>
                    <th data-field="time">Time</th>
                    <th data-field="team1">Team1</th>
                    <th data-field="team2">Team2</th>
                </tr>
            </thead>

            <tbody>
                @{
                    //int count = 0;
                    for (int i = 0; i < scheduler.MatchIDs.Count; i++)
                    {
                        //count++;
                        //int roundNum = i + 1;
                        <tr>
                            @{
                                if (Session["EditSchedule"] != null)
                                {
                                    if ((bool)Session["EditSchedule"])
                                    {
                                        <td><a href="@Href("~/UpdateSchedule", scheduler.MatchIDs[i])" class="btn waves-effect waves-light">Edit</a></td>
                                    }
                                }
                            }
                            <td>@scheduler.MatchIDs[i]</td>
                            <td>@scheduler.MatchTimes[i].ToString()</td>
                            <td>@scheduler.MatchTeam1Names[i]</td>
                            <td>@scheduler.MatchTeam2Names[i]</td>
                        </tr>
                                }
                }

            </tbody>
        </table>
    </div>
    <script type="text/javascript">
        $(document).ready(function () {
            $('select').material_select();
        });
        $('.datepicker').pickadate({
            format: 'm/d/yyyy',
            formatSubmit: 'mm/dd/yyyy',
            selectMonths: true,
            selectYears: true,
            min: new Date(2005, 0, 1),
            max: false
        });
    </script>
</body>

</html>